参考：
https://stackoverflow.com/questions/10664182/what-is-the-difference-between-jdk-dynamic-proxy-and-cglib

非常赞的回答：

JDK Dynamic proxy can only proxy by interface (so your target class needs to implement an interface, which is then also implemented by the proxy class).

CGLIB (and javassist) can create a proxy by subclassing. In this scenario the proxy becomes a subclass of the target class. No need for interfaces.

So Java Dynamic proxies can proxy: public class Foo implements iFoo where CGLIB can proxy: public class Foo

EDIT:

I should mention that because javassist and CGLIB use proxy by subclassing,
that this is the reason you cannot declare final methods or make the class final when using frameworks that rely on this.
That would stop these libraries from allowing to subclass your class and override your methods.



动态代理的总结

1：JDK 和 CGLib 都能实现动态代理的功能
2：不过他们实现的方式稍微不同
   JDK 只能通过接口的方式来实现动态代理
   CGLib 既可以通过接口的方式实现动态代理，也能通过类的方式实现动态代理
3：他们实现动态代理的本质是没有变的
   动态代理 = 代理模式 + 动态生成代理类的字节码文件
4：通过反射生成动态代理类，然后，通过这个动态代理类生成动态代理类的实例，方法增强的功能都是通过实现一个接口实现的
   JDK 核心通过
              java.lang.reflect.Proxy —— 通过反射动态生成代理类，然后通过代理类动态生成代理类的实例
              java.lang.reflect.InvocationHandler —— 调用对应的执行方法，实现此接口的类，才是真正的功能增强的实现

              https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Proxy.html

                  /**
                   * Returns an instance of a proxy class for the specified interfaces
                   * that dispatches method invocations to the specified invocation
                   * handler.
                   *
                   * <p>{@code Proxy.newProxyInstance} throws
                   * {@code IllegalArgumentException} for the same reasons that
                   * {@code Proxy.getProxyClass} does.
                   *
                   * @param   loader the class loader to define the proxy class
                   * @param   interfaces the list of interfaces for the proxy class
                   *          to implement
                   * @param   h the invocation handler to dispatch method invocations to
                   * @return  a proxy instance with the specified invocation handler of a
                   *          proxy class that is defined by the specified class loader
                   *          and that implements the specified interfaces
                   * @throws  IllegalArgumentException if any of the restrictions on the
                   *          parameters that may be passed to {@code getProxyClass}
                   *          are violated
                   * @throws  SecurityException if a security manager, <em>s</em>, is present
                   *          and any of the following conditions is met:
                   *          <ul>
                   *          <li> the given {@code loader} is {@code null} and
                   *               the caller's class loader is not {@code null} and the
                   *               invocation of {@link SecurityManager#checkPermission
                   *               s.checkPermission} with
                   *               {@code RuntimePermission("getClassLoader")} permission
                   *               denies access;</li>
                   *          <li> for each proxy interface, {@code intf},
                   *               the caller's class loader is not the same as or an
                   *               ancestor of the class loader for {@code intf} and
                   *               invocation of {@link SecurityManager#checkPackageAccess
                   *               s.checkPackageAccess()} denies access to {@code intf};</li>
                   *          <li> any of the given proxy interfaces is non-public and the
                   *               caller class is not in the same {@linkplain Package runtime package}
                   *               as the non-public interface and the invocation of
                   *               {@link SecurityManager#checkPermission s.checkPermission} with
                   *               {@code ReflectPermission("newProxyInPackage.{package name}")}
                   *               permission denies access.</li>
                   *          </ul>
                   * @throws  NullPointerException if the {@code interfaces} array
                   *          argument or any of its elements are {@code null}, or
                   *          if the invocation handler, {@code h}, is
                   *          {@code null}
                   */
                  @CallerSensitive
                  public static Object newProxyInstance(ClassLoader loader,
                                                        Class<?>[] interfaces,
                                                        InvocationHandler h)
                      throws IllegalArgumentException

   CGLib 核心通过
               net.sf.cglib.proxy.Enhancer —— 通过反射动态生成代理类，然后通过代理类动态生成代理类的实例
               net.sf.cglib.proxy.MethodInterceptor —— 调用对应的执行方法，实现此接口的类，才是真正的功能增强的实现

               http://cglib.sourceforge.net/apidocs/net/sf/cglib/proxy/Enhancer.html

               public java.lang.Object create()

                   Generate a new class if necessary and uses the specified callbacks (if any) to create a new object instance.
                   Uses the no-arg constructor of the superclass.

                   Returns:
                        a new instance

               public java.lang.Object create(java.lang.Class[] argumentTypes,
                                              java.lang.Object[] arguments)
                   Generate a new class if necessary and uses the specified callbacks (if any) to create a new object instance.
                   Uses the constructor of the superclass matching the argumentTypes parameter, with the given arguments.

                   Parameters:
                       argumentTypes - constructor signature
                       arguments - compatible wrapped arguments to pass to constructor

                   Returns:
                       a new instance


Generates dynamic subclasses to enable method interception. This class started as a substitute for the standard Dynamic Proxy support included with JDK 1.3, but one that allowed the proxies to extend a concrete base class, in addition to implementing interfaces. The dynamically generated subclasses override the non-final methods of the superclass and have hooks which callback to user-defined interceptor implementations.

The original and most general callback type is the MethodInterceptor, which in AOP terms enables "around advice"--that is, you can invoke custom code both before and after the invocation of the "super" method. In addition you can modify the arguments before calling the super method, or not call it at all.

Although MethodInterceptor is generic enough to meet any interception need, it is often overkill. For simplicity and performance, additional specialized callback types, such as LazyLoader are also available. Often a single callback will be used per enhanced class, but you can control which callback is used on a per-method basis with a CallbackFilter.

The most common uses of this class are embodied in the static helper methods. For advanced needs, such as customizing the ClassLoader to use, you should create a new instance of Enhancer. Other classes within CGLIB follow a similar pattern.

All enhanced objects implement the Factory interface, unless setUseFactory(boolean) is used to explicitly disable this feature. The Factory interface provides an API to change the callbacks of an existing object, as well as a faster and easier way to create new instances of the same type.

For an almost drop-in replacement for java.lang.reflect.Proxy, see the Proxy class.